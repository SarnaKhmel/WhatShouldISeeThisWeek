{"version":3,"sources":["parser.js","randomize.js","about.js","App.js","serviceWorker.js","index.js"],"names":["Parser","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","artist","title","venue","location","startDate","endDate","description","link","imageSrc","imageCaption","images","fetchFirstPage","bind","assertThisInitialized","inherits","createClass","key","value","_this2","fetch","encodeURIComponent","url","then","response","json","myJson","info","_embedded","setState","split","name","address","hours","showStart","substring","showEnd","dates","concat","descriptionExtended","path","pathLarge","captionFormatted","prevProps","react_default","a","createElement","src","alt","React","Component","Randomize","randomUrl","undefined","showAbout","constructRandomURL","fetchRandomPage","toggleAbout","about","onClick","href","pages","totalPages","Math","floor","random","content","id","parser_Parser","Fragment","App","randomize_Randomize","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f967a02c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport class Parser extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      artist: \"\",\n      title: \"\",\n      venue: \"\",\n      location: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      description: \"\",\n      link: \"\",\n      imageSrc: \"\",\n      imageCaption: \"\",\n      images: []\n    };\n    this.fetchFirstPage = this.fetchFirstPage.bind(this);\n  }\n\n  fetchFirstPage() {\n    fetch(\n      \"https://qe8jl4jty7.execute-api.us-east-1.amazonaws.com/dev/?url=\" +\n        encodeURIComponent(this.props.url)\n    )\n      .then(function(response) {\n        return response.json();\n      })\n      .then(myJson => {\n        //console.log(JSON.stringify(myJson));\n        const info = myJson._embedded.location[0];\n        const images = info.images;\n        this.setState({\n          artist: info.title.split(\"\\n\")[0],\n          title: info.title.split(\"\\n\")[1],\n          venue: info.location.name,\n          address: info.location.address,\n          hours: info.location.hours,\n          startDate: info.showStart.substring(0, 10),\n          endDate: info.showEnd.substring(0, 10),\n          dates: `${info.showStart.substring(\n            0,\n            10\n          )} to ${info.showEnd.substring(0, 10)}`,\n          description: info.descriptionExtended,\n          link: info.path,\n          imageSrc: `https://artforum.com${images[0].pathLarge}`,\n          imageCaption: images[0].captionFormatted\n        });\n      });\n  }\n  componentDidMount() {\n    this.fetchFirstPage();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps) {\n      this.fetchFirstPage();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.artist}</h1>\n        <h2>{this.state.title} </h2>\n        <h3> {this.state.venue} </h3>\n        <p> {this.state.address} </p>\n        <p> {this.state.hours} </p>\n        <p>{this.state.dates}</p>\n        <blockquote> {this.state.description} </blockquote>\n        <br />\n        <img src={this.state.imageSrc} alt={this.state.imageCaption} /> <br />\n        <p>\n          <small>{this.state.imageCaption}</small>\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Parser } from \"./parser\";\nimport { About } from \"./about\";\n\nexport class Randomize extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      randomUrl: undefined,\n      showAbout: false\n    };\n    this.constructRandomURL = this.constructRandomURL.bind(this);\n    this.fetchRandomPage = this.fetchRandomPage.bind(this);\n    this.toggleAbout = this.toggleAbout.bind(this);\n    this.about = <div onClick={this.toggleAbout}>{About()}</div>;\n  }\n\n  componentDidMount() {\n    this.fetchRandomPage();\n  }\n\n  fetchRandomPage() {\n    fetch(\n      \"https://qe8jl4jty7.execute-api.us-east-1.amazonaws.com/dev/?url=\" +\n        encodeURIComponent(\n          \"https://www.artforum.com/api/guide/entities-by-place-location/new-york?category=all&page=1&size=1&fetchAll=0\"\n        )\n    )\n      .then(function(response) {\n        return response.json();\n      })\n      .then(myJson => {\n        let url = this.constructRandomURL(myJson.pages);\n        this.setState({ randomUrl: url });\n      });\n    this.setState({ showAbout: false });\n  }\n\n  constructRandomURL(totalPages) {\n    return `https://www.artforum.com/api/guide/entities-by-place-location/new-york?category=all&page=${Math.floor(\n      Math.random() * totalPages\n    )}&size=1&fetchAll=0`;\n  }\n\n  toggleAbout() {\n    this.setState({ showAbout: !this.state.showAbout });\n  }\n\n  render() {\n    let content;\n    if (this.state.randomUrl === undefined) {\n      content = (\n        <div>\n          <img\n            src=\"https://media.giphy.com/media/l3nWhI38IWDofyDrW/giphy.gif\"\n            id=\"loading\"\n            alt=\"loading\"\n          />\n        </div>\n      );\n    } else if (this.state.showAbout === true) {\n      content = this.about;\n    } else {\n      content = <Parser url={this.state.randomUrl} />;\n    }\n\n    return (\n      <>\n        <div id=\"header\">\n          <h1 id=\"heading\">What should I see this week?</h1>\n          <button id=\"refreshDiv\" onClick={this.fetchRandomPage}>\n            Thank u, next!\n          </button>\n          <button onClick={this.toggleAbout}>About this project</button>\n        </div>\n        <div id=\"content\">\n          {\" \"}\n          <p />\n          {content}{\" \"}\n        </div>\n      </>\n    );\n  }\n}\n","import React from \"react\";\n\nexport function About() {\n  return (\n    <blockquote>\n      This is a project by <a href=\"https://siwinlo.github.io\">Siwin Lo</a>.\n      Want to see some art, but daunted by having to choose a \"cool\" or \"smart\"\n      show? This app picks a random show for you to see, taking all such\n      pressures off you.\n      <br />\n      Enjoy!\n    </blockquote>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Randomize } from \"./randomize.js\";\n\nfunction App() {\n  return <div>{<Randomize />}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["parser.js","randomize.js","App.js","serviceWorker.js","index.js"],"names":["Parser","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","artist","undefined","title","venue","location","startDate","endDate","description","link","imageSrc","imageCaption","images","fetchFirstPage","bind","assertThisInitialized","componentDidMount","componentDidUpdate","inherits","createClass","key","value","_this2","fetch","encodeURIComponent","url","then","response","json","myJson","info","_embedded","setState","split","name","address","hours","showStart","substring","showEnd","dates","concat","descriptionExtended","path","pathLarge","captionFormatted","prevProps","react_default","a","createElement","src","alt","React","Component","Randomize","randomUrl","showAbout","constructRandomURL","fetchRandomPage","toggleAbout","about","href","pages","totalPages","Math","floor","random","content","id","parser_Parser","Fragment","onClick","App","randomize_Randomize","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aeb04542.chunk.js","sourcesContent":["import React from \"react\";\n\nexport class Parser extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      artist: undefined,\n      title: undefined,\n      venue: undefined,\n      location: undefined,\n      startDate: undefined,\n      endDate: undefined,\n      description: undefined,\n      link: undefined,\n      imageSrc: undefined,\n      imageCaption: undefined,\n      images: []\n    };\n    this.fetchFirstPage = this.fetchFirstPage.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.componentDidUpdate = this.componentDidUpdate.bind(this);\n  }\n\n  fetchFirstPage() {\n    fetch(\n      \"https://qe8jl4jty7.execute-api.us-east-1.amazonaws.com/dev/?url=\" +\n        encodeURIComponent(this.props.url)\n    )\n      .then(function(response) {\n        return response.json();\n      })\n      .then(myJson => {\n        //console.log(JSON.stringify(myJson));\n        const info = myJson._embedded.location[0];\n        const images = info.images;\n        this.setState({\n          artist: info.title.split(\"\\n\")[0],\n          title: info.title.split(\"\\n\")[1],\n          venue: info.location.name,\n          address: info.location.address,\n          hours: info.location.hours,\n          startDate: info.showStart.substring(0, 10),\n          endDate: info.showEnd.substring(0, 10),\n          dates: `${info.showStart.substring(\n            0,\n            10\n          )} to ${info.showEnd.substring(0, 10)}`,\n          description: info.descriptionExtended,\n          link: info.path,\n          imageSrc: `https://artforum.com${images[0].pathLarge}`,\n          imageCaption: images[0].captionFormatted\n        });\n      });\n  }\n  componentDidMount() {\n    this.fetchFirstPage();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps) {\n      this.fetchFirstPage();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.artist}</h1>\n        <h2>{this.state.title} </h2>\n        <h3> {this.state.venue} </h3>\n        <p> {this.state.address} </p>\n        <p> {this.state.hours} </p>\n        <p>{this.state.dates}</p>\n        <blockquote> {this.state.description} </blockquote>\n        <br />\n        <img src={this.state.imageSrc} alt={this.state.imageCaption} /> <br />\n        <p>\n          <small>{this.state.imageCaption}</small>\n        </p>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Parser } from \"./parser\";\n\nexport class Randomize extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      randomUrl: undefined,\n      showAbout: false\n    };\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.constructRandomURL = this.constructRandomURL.bind(this);\n    this.fetchRandomPage = this.fetchRandomPage.bind(this);\n    this.toggleAbout = this.toggleAbout.bind(this);\n    this.about = (\n      <div>\n        {\" \"}\n        This is a project by <a href=\"https://siwinlo.github.io\">Siwin Lo</a>.\n        Want to see some art, but daunted by having to choose a \"cool\" or\n        \"smart\" show? This app picks a random show for you to see, taking all\n        such pressures off you. Enjoy.{\" \"}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.fetchRandomPage();\n  }\n\n  fetchRandomPage() {\n    fetch(\n      \"https://qe8jl4jty7.execute-api.us-east-1.amazonaws.com/dev/?url=\" +\n        encodeURIComponent(\n          \"https://www.artforum.com/api/guide/entities-by-place-location/new-york?category=all&page=1&size=1&fetchAll=0\"\n        )\n    )\n      .then(function(response) {\n        return response.json();\n      })\n      .then(myJson => {\n        let url = this.constructRandomURL(myJson.pages);\n        this.setState({ randomUrl: url });\n      });\n  }\n\n  constructRandomURL(totalPages) {\n    return `https://www.artforum.com/api/guide/entities-by-place-location/new-york?category=all&page=${Math.floor(\n      Math.random() * totalPages\n    )}&size=1&fetchAll=0`;\n  }\n\n  toggleAbout() {\n    this.setState({ showAbout: !this.state.showAbout });\n  }\n\n  render() {\n    let content;\n    if (this.state.randomUrl === undefined) {\n      content = (\n        <div>\n          <img\n            src=\"https://media.giphy.com/media/l3nWhI38IWDofyDrW/giphy.gif\"\n            id=\"loading\"\n            alt=\"loading\"\n          />\n        </div>\n      );\n    } else if (this.state.showAbout === true) {\n      content = this.about;\n    } else {\n      content = <Parser url={this.state.randomUrl} />;\n    }\n\n    return (\n      <>\n        {/* <header> */}\n        <h1>What should I see this week?</h1>\n        {/* <nav> */}\n        <button id=\"refreshDiv\" onClick={this.fetchRandomPage}>\n          I want to see something different!\n        </button>\n        <button onClick={this.toggleAbout}>About this project</button>\n        {/* </nav> */}\n        {/* </header> */}\n        {content}\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Randomize } from \"./randomize.js\";\n\nfunction App() {\n  return <div>{<Randomize />}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}